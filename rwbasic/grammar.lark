// Common base tokens
%import common (DIGIT, HEXDIGIT, NEWLINE, LETTER)

// Ignore whitespace
%import common (WS_INLINE)
%ignore WS_INLINE

// Numeric literal tokens
BOOLEAN_LITERAL: "TRUE"i | "FALSE"i
BINARY_LITERAL: "%" ("0".."1")+
DECIMAL_LITERAL: DIGIT+
HEX_LITERAL: "&" HEXDIGIT+
_EXPONENT: "E"i ["+" | "-"] DIGIT+
_FIXED_LITERAL: DECIMAL_LITERAL "." DECIMAL_LITERAL?
FLOAT_LITERAL: DECIMAL_LITERAL _EXPONENT | _FIXED_LITERAL _EXPONENT?

// String literal
STRING_LITERAL: "\"" (/[^"]/ | "\"\"")* "\""

// Variable reference. We use a low priority to match keywords in preference.
VARIABLE.-1: LETTER (LETTER | DIGIT)* ("$" | "%")?

// Classes of operator tokens grouped by priority. Operators listed first are acted upon before
// operators listed second and so on.
UNARYOP: "+" | "-" | "NOT"i // TODO: indirection
POWEROP: "^"
MULOP: "*" | "/" | "DIV"i | "MOD"i
ADDOP: "+" | "-"
COMPOP: "=" | "<>" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | ">>>"
ANDOP: "AND"i
OROP: "OR"i | "EOR"i

// Symbols
SEMICOLON: ";"

// Keywords.
// TODO: abbreviations, see e.g. https://central.kaserver5.org/Kasoft/Typeset/BBC/Ch47.html
LET: "LET"i
NEW: "NEW"i
PRINT: "PRINT"i
REM: "REM"i
RUN: "RUN"i

// Comment. Will match to end of line including any ":" characters.
COMMENT: REM /[^\r\n]/*

// Usually we start with a program
?start: program

// A program definition
program: (program_line NEWLINE)* program_line

?program_line: numbered_line_definition | unnumbered_line_definition

unnumbered_line_definition: line_statements

// Input to the interactive prompt
?promptline: numbered_line_definition | line_statements

// Define a line via a line number.
numbered_line_definition: DECIMAL_LITERAL line_statements

// Statements within a line.
line_statements: (statement ":")* statement?
?statement: comment_statement
          | print_statement
          | let_statement
          | run_statement
          | new_statement
comment_statement: COMMENT
print_statement: PRINT expression SEMICOLON?
let_statement: LET? VARIABLE "=" expression
run_statement: RUN
new_statement: NEW

// Expressions
?expression: orexpr
?orexpr: (andexpr OROP)* andexpr
?andexpr: (compexpr ANDOP)* compexpr
?compexpr: (addexpr COMPOP)* addexpr
?addexpr: (mulexpr ADDOP)* mulexpr
?mulexpr: (powerexpr MULOP)* powerexpr
?powerexpr: (unaryexpr POWEROP)* unaryexpr
?unaryexpr: UNARYOP* atomexpr
?atomexpr: "(" expression ")"
         | literalexpr
         | variablerefexpr
literalexpr: BOOLEAN_LITERAL | BINARY_LITERAL | DECIMAL_LITERAL | HEX_LITERAL | FLOAT_LITERAL
           | STRING_LITERAL
variablerefexpr: VARIABLE
