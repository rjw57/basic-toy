// Common base tokens
%import common (DIGIT, HEXDIGIT, NEWLINE, LETTER)

// Ignore whitespace
%import common (WS_INLINE)
%ignore WS_INLINE

// Numeric literal tokens
BOOLEAN_LITERAL: "TRUE"i | "FALSE"i
BINARY_LITERAL: "%" ("0".."1")+
DECIMAL_LITERAL: DIGIT+
HEX_LITERAL: "&" HEXDIGIT+
_EXPONENT: "E"i ["+" | "-"] DIGIT+
_FIXED_LITERAL: DECIMAL_LITERAL "." DECIMAL_LITERAL?
FLOAT_LITERAL: DECIMAL_LITERAL _EXPONENT | _FIXED_LITERAL _EXPONENT?

// String literal
STRING_LITERAL: "\"" (/[^"]/ | "\"\"")* "\""

// Variable reference. Low priority so we prefer matching terminals like TRUE and FALSE first.
VARIABLE.-1: LETTER (LETTER | DIGIT)* ("$" | "%")?

// Punctuation
EQUALS: "="
SEMICOLON: ";"
APOSTROPHE: "'"
COMMA: ","

// Operators
POWEROP: "^"
MULOP: "*" | "/"
ADDOP: "+" | "-"
COMPOP: "<>" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | ">>>"

// Keywords.
// TODO: abbreviations, see e.g. https://central.kaserver5.org/Kasoft/Typeset/BBC/Ch47.html
AND: "AND"i
DIV: "DIV"i
ELSE: "ELSE"i
END: "END"i
ENDIF: "ENDIF"i
EOR: "EOR"i
FOR: "FOR"i
IF: "IF"i
LET: "LET"i
LIST: "LIST"i
MOD: "MOD"i
NEW: "NEW"i
NEXT: "NEXT"i
NOT: "NOT"i
OR: "OR"i
PRINT: "PRINT"i
REM: "REM"i
RENUMBER: "RENUMBER"i
REPEAT: "REPEAT"i
RUN: "RUN"i
STEP: "STEP"i
THEN: "THEN"i
TO: "TO"i
UNTIL: "UNTIL"i
WEND: "WEND"i
WHILE: "WHILE"i

COMMENT: /REM[^\n]*/i
SHEBANG_LINE: /#![^\n]*/

// Print formatting
PRINT_ITEM_SEPARATOR: SEMICOLON | COMMA | APOSTROPHE

// A program definition
program: (SHEBANG_LINE NEWLINE)? (program_line NEWLINE)* program_line
?program_line: numbered_line_definition | unnumbered_line_definition
unnumbered_line_definition: line_definition_statements
numbered_line_definition: DECIMAL_LITERAL line_definition_statements

// Input to the interactive prompt
?promptline: numbered_line_update
           | prompt_line_statements
numbered_line_update: DECIMAL_LITERAL line_definition_statements
prompt_line_statements: (prompt_line_statement ":")* (prompt_line_statement | comment_statement)?

line_definition_statements: (line_definition_initial_statement ":")? \
                                (line_definition_statement ":")* \
                                (line_definition_statement | line_definition_final_statement)?
                          | line_definition_initial_statement

// Statements which can appear anywhere in line definitions.
?line_definition_statement: statement
                          | end_statement
                          | for_statement
                          | next_statement
                          | repeat_statement
                          | until_statement
                          | while_statement
                          | wend_statement

// Statements which can appear in line definitions but only at the start
?line_definition_initial_statement: else_statement
                                  | endif_statement

// Statements which can appear in line definitions but only at the end
?line_definition_final_statement: if_statement
                                | comment_statement

// Statements which can appear in the prompt line.
?prompt_line_statement: statement
                      | new_statement
                      | run_statement
                      | list_statement
                      | renumber_statement

// Statements within a line which can appear in line definitions or the prompt line.
?statement: print_statement
          | let_statement
          | inline_for_statement
          | inline_if_statement
          | inline_repeat_statement
          | inline_while_statement

// Prompt-only statements
run_statement: RUN
new_statement: NEW
list_statement: LIST
renumber_statement: RENUMBER

// Program-only statements
end_statement: END

// Prompt and program statements
comment_statement: COMMENT
print_statement: PRINT (expression+ PRINT_ITEM_SEPARATOR)* expression*
let_statement: LET? VARIABLE EQUALS expression
for_statement: FOR VARIABLE EQUALS expression TO expression (STEP expression)?
next_statement: NEXT VARIABLE?
if_statement: IF expression THEN
else_statement: ELSE
endif_statement: ENDIF
repeat_statement: REPEAT
until_statement: UNTIL expression
while_statement: WHILE expression
wend_statement: WEND

// Inline loops, can appear in prompt lines or programs but covers only one line.
inline_for_statement: for_statement ":" (statement ":")* next_statement
inline_repeat_statement: repeat_statement ":" (statement ":")* until_statement
inline_while_statement: while_statement ":" (statement ":")* wend_statement

// Inline IF statement, can appear in prompt lines or programs but covers only one line.
inline_if_statement: inline_if_header inline_statement_block (ELSE inline_statement_block)?
inline_if_header: IF expression THEN?
inline_statement_block: (statement ":")* statement

// Expressions
?andop: AND
?orop: OR | EOR
?unaryop: ADDOP | NOT // TODO indirection
?mulop: MULOP | DIV | MOD
?compop: EQUALS | COMPOP

?expression: orexpr
?orexpr: (andexpr orop)* andexpr
?andexpr: (compexpr andop)* compexpr
?compexpr: (addexpr compop)* addexpr
?addexpr: (mulexpr ADDOP)* mulexpr
?mulexpr: (powerexpr mulop)* powerexpr
?powerexpr: (unaryexpr POWEROP)* unaryexpr
?unaryexpr: unaryop* atomexpr
?atomexpr: "(" expression ")"
         | numliteralexpr
         | strliteralexpr
         | variablerefexpr
numliteralexpr: BOOLEAN_LITERAL | BINARY_LITERAL | DECIMAL_LITERAL | HEX_LITERAL | FLOAT_LITERAL
strliteralexpr: STRING_LITERAL
variablerefexpr: VARIABLE
